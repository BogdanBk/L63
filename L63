using System;

public class Quaternion
{
    public double W { get; set; }
    public double X { get; set; }
    public double Y { get; set; }
    public double Z { get; set; }

    public Quaternion(double w, double x, double y, double z)
    {
        W = w;
        X = x;
        Y = y;
        Z = z;
    }

    // Перевантаження операторів для арифметичних операцій
    public static Quaternion operator +(Quaternion q1, Quaternion q2)
    {
        return new Quaternion(q1.W + q2.W, q1.X + q2.X, q1.Y + q2.Y, q1.Z + q2.Z);
    }

    public static Quaternion operator -(Quaternion q1, Quaternion q2)
    {
        return new Quaternion(q1.W - q2.W, q1.X - q2.X, q1.Y - q2.Y, q1.Z - q2.Z);
    }

    public static Quaternion operator *(Quaternion q1, Quaternion q2)
    {
        double w = q1.W * q2.W - q1.X * q2.X - q1.Y * q2.Y - q1.Z * q2.Z;
        double x = q1.W * q2.X + q1.X * q2.W + q1.Y * q2.Z - q1.Z * q2.Y;
        double y = q1.W * q2.Y - q1.X * q2.Z + q1.Y * q2.W + q1.Z * q2.X;
        double z = q1.W * q2.Z + q1.X * q2.Y - q1.Y * q2.X + q1.Z * q2.W;

        return new Quaternion(w, x, y, z);
    }

    // Методи для обчислення норми, спряженого та інверсного кватерніона
    public double Magnitude()
    {
        return Math.Sqrt(W * W + X * X + Y * Y + Z * Z);
    }

    public Quaternion Conjugate()
    {
        return new Quaternion(W, -X, -Y, -Z);
    }

    public Quaternion Inverse()
    {
        double magnitudeSquared = W * W + X * X + Y * Y + Z * Z;
        if (magnitudeSquared == 0)
        {
            throw new InvalidOperationException("Quaternion has zero magnitude and no inverse.");
        }

        double inverseMagnitude = 1.0 / magnitudeSquared;
        return new Quaternion(W * inverseMagnitude, -X * inverseMagnitude, -Y * inverseMagnitude, -Z * inverseMagnitude);
    }

    // Перевантажені версії операцій порівняння
    public static bool operator ==(Quaternion q1, Quaternion q2)
    {
        return q1.Equals(q2);
    }

    public static bool operator !=(Quaternion q1, Quaternion q2)
    {
        return !q1.Equals(q2);
    }

    public override bool Equals(object obj)
    {
        if (obj == null || GetType() != obj.GetType())
        {
            return false;
        }

        Quaternion other = (Quaternion)obj;
        return W == other.W && X == other.X && Y == other.Y && Z == other.Z;
    }

    public override int GetHashCode()
    {
        return W.GetHashCode() ^ X.GetHashCode() ^ Y.GetHashCode() ^ Z.GetHashCode();
    }

    // Метод для конвертації кватерніона в матрицю обертання
    public double[,] ToRotationMatrix()
    {
        double[,] matrix = new double[3, 3];

        matrix[0, 0] = 1 - 2 * (Y * Y + Z * Z);
        matrix[0, 1] = 2 * (X * Y - W * Z);
        matrix[0, 2] = 2 * (X * Z + W * Y);

        matrix[1, 0] = 2 * (X * Y + W * Z);
        matrix[1, 1] = 1 - 2 * (X * X + Z * Z);
        matrix[1, 2] = 2 * (Y * Z - W * X);

        matrix[2, 0] = 2 * (X * Z - W * Y);
        matrix[2, 1] = 2 * (Y * Z + W * X);
        matrix[2, 2] = 1 - 2 * (X * X + Y * Y);

        return matrix;
    }
}

class Program
{
    static void Main()
    {
        // Приклад використання
        Quaternion q1 = new Quaternion(1, 2, 3, 4);
        Quaternion q2 = new Quaternion(5, 6, 7, 8);

        Quaternion sum = q1 + q2;
        Quaternion difference = q1 - q2;
        Quaternion product = q1 * q2;

        Console.WriteLine($"Sum: {sum.W}, {sum.X}, {sum.Y}, {sum.Z}");
        Console.WriteLine($"Difference: {difference.W}, {difference.X}, {difference.Y}, {difference.Z}");
        Console.WriteLine($"Product: {product.W}, {product.X}, {product.Y}, {product.Z}");

        Console.WriteLine($"Magnitude of q1: {q1.Magnitude()}");
        Console.WriteLine($"Conjugate of q1: {q1.Conjugate().W}, {q1.Conjugate().X}, {q1.Conjugate().Y}, {q1.Conjugate().Z}");
        Console.WriteLine($"Inverse of q1: {q1.Inverse().W}, {q1.Inverse().X}, {q1.Inverse().Y}, {q1.Inverse().Z}");

        // Перевірка операцій порівняння
        Console.WriteLine($"q1 == q2: {q1 == q2}");
        Console.WriteLine($"q1 != q2: {q1 != q2}");

        // Конвертація кватерніона в матрицю обертання
        double[,] rotationMatrix = q1.ToRotationMatrix();
        Console.WriteLine("Rotation Matrix:");
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                Console.Write($"{rotationMatrix[i, j]} ");
            }
            Console.WriteLine();
        }
    }
}
